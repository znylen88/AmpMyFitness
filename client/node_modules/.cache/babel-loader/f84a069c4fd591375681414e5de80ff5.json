{"ast":null,"code":"import _classCallCheck from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/z/Desktop/AMPY/client/src/pages/LoginPage.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Auth from '../utils/Auth';\nimport LoginForm from '../components/LoginForm.jsx';\nimport API from '../utils/API';\n\nvar LoginPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(LoginPage, _React$Component);\n\n  function LoginPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      errors: {},\n      successMessage: '',\n      user: {\n        email: '',\n        password: ''\n      }\n    };\n\n    _this.processForm = function (event) {\n      // prevent default action. in this case, action is the form submission event\n      event.preventDefault(); // create a string for an HTTP body message\n\n      var _this$state$user = _this.state.user,\n          email = _this$state$user.email,\n          password = _this$state$user.password;\n      API.login({\n        email: email,\n        password: password\n      }).then(function (res) {\n        // save the token\n        Auth.authenticateUser(res.data.token); // update authenticated state\n\n        _this.props.toggleAuthenticateStatus(); // redirect signed in user to dashboard\n\n\n        _this.props.history.push('/home');\n      }).catch(function (_ref) {\n        var response = _ref.response;\n        var errors = response.data.errors ? response.data.errors : {};\n        errors.summary = response.data.message;\n\n        _this.setState({\n          errors: errors\n        });\n      });\n    };\n\n    _this.changeUser = function (event) {\n      var field = event.target.name;\n      var user = _this.state.user;\n      user[field] = event.target.value;\n\n      _this.setState({\n        user: user\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var storedMessage = localStorage.getItem('successMessage');\n      var successMessage = '';\n\n      if (storedMessage) {\n        successMessage = storedMessage;\n        localStorage.removeItem('successMessage');\n      }\n\n      this.setState({\n        successMessage: successMessage\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        errors: {}\n      });\n    }\n    /**\n     * Process the form.\n     *\n     * @param {object} event - the JavaScript event object\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * Render the component.\n     */\n    value: function render() {\n      return React.createElement(LoginForm, {\n        onSubmit: this.processForm,\n        onChange: this.changeUser,\n        errors: this.state.errors,\n        successMessage: this.state.successMessage,\n        user: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LoginPage;\n}(React.Component); // commented out line 100 - 102 because of error with proptype required but undefined - not sure if this is deprecated or if there is a different problem\n// LoginPage.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/z/Desktop/AMPY/client/src/pages/LoginPage.jsx"],"names":["React","PropTypes","Auth","LoginForm","API","LoginPage","state","errors","successMessage","user","email","password","processForm","event","preventDefault","login","then","res","authenticateUser","data","token","props","toggleAuthenticateStatus","history","push","catch","response","summary","message","setState","changeUser","field","target","name","value","storedMessage","localStorage","getItem","removeItem","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Auth from '../utils/Auth';\nimport LoginForm from '../components/LoginForm.jsx';\nimport API from '../utils/API';\n\nclass LoginPage extends React.Component {\n  // set the initial component state\n  state = {\n    errors: {},\n    successMessage: '',\n    user: {\n      email: '',\n      password: ''\n    }\n  }\n  \n  componentDidMount(){\n    const storedMessage = localStorage.getItem('successMessage');\n    let successMessage = '';\n\n    if (storedMessage) {\n      successMessage = storedMessage;\n      localStorage.removeItem('successMessage');\n    }\n    this.setState({ successMessage });\n  }\n\n  componentWillUnmount(){\n    this.setState({\n          errors: {}\n        });\n  }\n  /**\n   * Process the form.\n   *\n   * @param {object} event - the JavaScript event object\n   */\n  processForm = event => {\n    // prevent default action. in this case, action is the form submission event\n    event.preventDefault();\n\n    // create a string for an HTTP body message\n    const { email, password } = this.state.user;\n\n    API.login({email, password}).then(res => {\n        // save the token\n        Auth.authenticateUser(res.data.token);\n\n        // update authenticated state\n        this.props.toggleAuthenticateStatus()\n        \n        // redirect signed in user to dashboard\n        this.props.history.push('/home');\n        \n    }).catch(( {response} ) => {\n\n        const errors = response.data.errors ? response.data.errors : {};\n        errors.summary = response.data.message;\n\n        this.setState({\n          errors\n        });\n      });\n    \n  }\n\n  /**\n   * Change the user object.\n   *\n   * @param {object} event - the JavaScript event object\n   */\n  changeUser = event => {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  /**\n   * Render the component.\n   */\n  render() {\n    return (\n      <LoginForm\n        onSubmit={this.processForm}\n        onChange={this.changeUser}\n        errors={this.state.errors}\n        successMessage={this.state.successMessage}\n        user={this.state.user}\n      />\n    );\n  }\n}\n// commented out line 100 - 102 because of error with proptype required but undefined - not sure if this is deprecated or if there is a different problem\n// LoginPage.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}