{"ast":null,"code":"import _classCallCheck from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/z/Desktop/AMPY/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Auth = /*#__PURE__*/function () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n  }\n\n  _createClass(Auth, null, [{\n    key: \"authenticateUser\",\n\n    /**\n     * Authenticate a user. Save a token string in Local Storage\n     *\n     * @param {string} token\n     */\n    value: function authenticateUser(token) {\n      localStorage.setItem('token', token);\n    }\n    /**\n     * Check if a user is authenticated - check if a token is saved in Local Storage\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isUserAuthenticated\",\n    value: function isUserAuthenticated() {\n      return localStorage.getItem('token') !== null;\n    }\n    /**\n     * Deauthenticate a user. Remove a token from Local Storage.\n     *\n     */\n\n  }, {\n    key: \"deauthenticateUser\",\n    value: function deauthenticateUser() {\n      localStorage.removeItem('token');\n    }\n    /**\n     * Get a token value.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return localStorage.getItem('token');\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport default Auth;","map":{"version":3,"sources":["/Users/z/Desktop/AMPY/client/src/utils/Auth.js"],"names":["Auth","token","localStorage","setItem","getItem","removeItem"],"mappings":";;;IAAMA,I;;;;;;;;AAEF;;;;;qCAKwBC,K,EAAO;AAC7BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACD;AAED;;;;;;;;0CAK6B;AAC3B,aAAOC,YAAY,CAACE,OAAb,CAAqB,OAArB,MAAkC,IAAzC;AACD;AAED;;;;;;;yCAI4B;AAC1BF,MAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACD;AAED;;;;;;;;+BAMkB;AAChB,aAAOH,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAP;AACD;;;;;;AAIH,eAAeJ,IAAf","sourcesContent":["class Auth {\n\n    /**\n     * Authenticate a user. Save a token string in Local Storage\n     *\n     * @param {string} token\n     */\n    static authenticateUser(token) {\n      localStorage.setItem('token', token);\n    }\n  \n    /**\n     * Check if a user is authenticated - check if a token is saved in Local Storage\n     *\n     * @returns {boolean}\n     */\n    static isUserAuthenticated() {\n      return localStorage.getItem('token') !== null;\n    }\n  \n    /**\n     * Deauthenticate a user. Remove a token from Local Storage.\n     *\n     */\n    static deauthenticateUser() {\n      localStorage.removeItem('token');\n    }\n  \n    /**\n     * Get a token value.\n     *\n     * @returns {string}\n     */\n  \n    static getToken() {\n      return localStorage.getItem('token');\n    }\n  \n  }\n  \n  export default Auth;"]},"metadata":{},"sourceType":"module"}